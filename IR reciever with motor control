import ir_rx
import machine
import math, time
from machine import PWM
from machine import Pin
#from machine import Pin

from ir_rx.nec import NEC_8 # Use the NEC 8-bit class
from ir_rx.print_error import print_error # for debugging
# Callback function to execute when an IR code is received
pwm_rate = 2000
ain1_ph = Pin(12, Pin.OUT) # Initialize GP14 as an OUTPUT
ain2_en = PWM(13, freq = pwm_rate, duty_u16 = 0)
bin1_ph = Pin(10, Pin.OUT)
bin2_en = PWM(11, freq = pwm_rate, duty_u16 = 0)
led = Pin(9, Pin.OUT)
led2 = Pin(8, Pin.OUT)
led3 = Pin(7, Pin.OUT)
pwm = min(max(int(2**16 * abs(1)), 0), 65535)
def ir_callback(data, addr, _):
    print(f"Received NEC command! Data: 0x{data:02X}, Addr: 0x{addr:02X}")
    while True:
        print("Motor ON") # Print to REPL
        ain1_ph.low()
        ain2_en.duty_u16(pwm)
        bin1_ph.low()
        bin2_en.duty_u16(pwm)
        time.sleep(2)
        print("Motor OFF") # Print to REPL
        ain1_ph.low()
        ain2_en.duty_u16(0)
        bin1_ph.low()
        bin2_en.duty_u16(0)
        time.sleep(2)
        break
# Setup the IR receiver
ir_pin = Pin(17, Pin.IN, Pin.PULL_UP)

ir_receiver = NEC_8(ir_pin, callback=ir_callback)
# Optional: Use the print_error function for debugging
ir_receiver.error_function(print_error)
# Main loop to keep the script running
while True:
    pass # Execution is interrupt-driven, so just keep the script alive
